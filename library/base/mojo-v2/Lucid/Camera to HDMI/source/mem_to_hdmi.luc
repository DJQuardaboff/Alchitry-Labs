module mem_to_hdmi #(
    X_RES = 853,
    Y_RES = 480
  )(
    input clk,
    input pclk,  // clock
    input rst,  // reset
    input<Memory.slave> memIn,
    output<Memory.master> memOut,
    input x[11],
    input y[10],
    input active,
    output red[8],
    output green[8],
    output blue[8],
    input next_frame[2],
    output current_frame[2]
  ) {
  
  const ADDR_COUNT = X_RES * Y_RES / 2;
  
  .clk(clk) {
    .rst(rst) {
      
      fsm rstate = { CMD, READ, WRITE_1, WRITE_2 };
      dff addr[$clog2(ADDR_COUNT)];
      dff saved[32];
      dff frame[2];
    }
    dff full_flag;
  }
  
  .clk(pclk) {
    .rst(rst) {
      fsm state = { WAIT_FIFO, WAIT_FRAME, ACTIVE };
    }
    dff full_sync[2];
  }
  
  async_fifo fifo (#SIZE(16), #DEPTH(2048), .wclk(clk), .wrst(rst), .rclk(pclk), .rrst(rst));
  
  sig red_sub[5];
  sig green_sub[6];
  sig blue_sub[5];
  
  always {
    red_sub = fifo.dout[15:11];
    green_sub = fifo.dout[10:5];
    blue_sub = fifo.dout[4:0];
    
    red = c{red_sub, red_sub[4:2]};
    green = c{green_sub, green_sub[5:4]};
    blue = c{blue_sub, blue_sub[4:2]};
    
    current_frame = frame.q;
    
    memOut.valid = 0;
    memOut.data = 32bx;
    memOut.addr = c{addr.q[addr.WIDTH-1:8], frame.q, addr.q[7:0]};
    memOut.write = 0;
    
    fifo.wput = 0;
    fifo.rget = 0;
    fifo.din = 16bx;
    
    case (rstate.q) {
      rstate.CMD:
        if (!memIn.busy) {
          memOut.valid = 1;
          addr.d = addr.q + 1;
          if (addr.q == ADDR_COUNT - 1) {
            addr.d = 0;
            frame.d = next_frame;
          }
          rstate.d = rstate.READ;
        }
      
      rstate.READ:
        if (memIn.valid) {
          saved.d = memIn.data;
          if (!fifo.full) {
            fifo.wput = 1;
            fifo.din = memIn.data[15:0];
            rstate.d = rstate.WRITE_2;
          } else {
            rstate.d = rstate.WRITE_1;
          }
        }
      
      rstate.WRITE_1:
        if (!fifo.full) {
          fifo.wput = 1;
          fifo.din = saved.q[15:0];
          rstate.d = rstate.WRITE_2;
        }
      
      rstate.WRITE_2:
        if (!fifo.full) {
          fifo.wput = 1;
          fifo.din = saved.q[31:16];
          if (!memIn.busy) {
            memOut.valid = 1;
            addr.d = addr.q + 1;
            if (addr.q == ADDR_COUNT - 1) {
              addr.d = 0;
              frame.d = next_frame;
            }
            rstate.d = rstate.READ;
          } else {
            rstate.d = rstate.CMD;
          }
        }
    }
    
    // cross from clk to pclk
    full_flag.d = fifo.full;
    full_sync.d = c{full_sync.q[0], full_flag.q};
    
    case (state.q) {
      state.WAIT_FIFO:
        if (full_sync.q[1])
          state.d = state.WAIT_FRAME;
      
      state.WAIT_FRAME:
        if (x == X_RES - 1 && y == Y_RES - 1)
          state.d = state.ACTIVE;
      
      state.ACTIVE:
        fifo.rget = active;
    }
  }
}