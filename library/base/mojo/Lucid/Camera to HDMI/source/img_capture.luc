module img_capture #(
    X_RES = 854,
    Y_RES = 480
  ) (
    input clk,                       // clock
    input rst,                       // reset
    
    input next_frame[2],
    output current_frame[2],
    output idle,
    input start,
    
    input<Camera.image_data> img,    // image data stream
    
    output<Memory.master> memOut,    // memory interface
    input<Memory.slave> memIn
  ) {
  
  const FRAME_SIZE = X_RES * Y_RES / 2;
  
  .clk(clk) {
    .rst(rst) {
      fsm state = {IDLE, WAIT_FRAME, WAIT_PIXEL_1, WAIT_PIXEL_2, WRITE_SDRAM};
      
      // RAM may not be ready for each pixel so we need to buffer the writes
      mem_write_buffer buffer (#DEPTH(1024));
    }
    dff x_ct[$clog2(OV2640_config.HRES/2)];
    dff y_ct[$clog2(OV2640_config.VRES)];
    dff addr[$clog2(FRAME_SIZE)];       // RAM address to write to
    dff data[32];                                     // data to write
    dff frame[2];
  }
  
  always {
    buffer.memIn = memIn;                             // connect buffer to RAM
    memOut = buffer.memOut;
    
    buffer.devIn.valid = 0;                           // not valid
    buffer.devIn.write = 1;                           // always a write
    buffer.devIn.data = data.q;                       // connect data
    buffer.devIn.addr = c{addr.q[addr.WIDTH-1:8], frame.q, addr.q[7:0]};                       // connect address
    idle = state.q == state.IDLE;                     // idle when we are IDLE
    current_frame = frame.q;
    
    case (state.q) {
      state.IDLE:
        addr.d = 0;                                   // reset address
        y_ct.d = 0;
        x_ct.d = 0;
        if (start){                                    // if start
          state.d = state.WAIT_FRAME;                 // wait for the next frame
          frame.d = next_frame;
        }
      
      state.WAIT_FRAME:
        if (img.end_frame)                            // if end of current frame
          state.d = state.WAIT_PIXEL_1;               // start capturing pixels
      
      state.WAIT_PIXEL_1:
        if (img.new_pixel) {                          // if new pixel
          data.d[15:0] = img.pixel;                   // write to lower half
          state.d = state.WAIT_PIXEL_2;               // wait for next pixel
        }
      
      state.WAIT_PIXEL_2:
        if (img.new_pixel) {                          // if new pixel
          data.d[31:16] = img.pixel;                  // write to upper half
          state.d = state.WRITE_SDRAM;                // write data to SDRAM
        }
      
      state.WRITE_SDRAM:
        if (!buffer.devOut.busy) {                    // if buffer isn't full (busy)
          buffer.devIn.valid = 1;                     // new command
          addr.d = addr.q + 1;                        // increment the address
          x_ct.d = x_ct.q + 1;
          state.d = state.WAIT_PIXEL_1;               // wait for next pixel
          
          if (x_ct.q == (OV2640_config.HRES/2)-1){
            x_ct.d = 0;
            y_ct.d = y_ct.q + 1;
            addr.d = addr.q + (X_RES - OV2640_config.HRES)/2 + 1;
          }
          
          if (y_ct.q == OV2640_config.VRES-1) // if we read in all the pixels
            state.d = state.IDLE;                     // return to idle
        }
      
      default:
        state.d = state.IDLE;                         // shouldn't reach here
    }
  }
}